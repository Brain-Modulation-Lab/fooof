.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_03-FOOOFAlgorithm.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_03-FOOOFAlgorithm.py:


03: FOOOF Algorithm
===================

A step by step overview of the FOOOF algorithm.

Note that this notebook is for demonstrative purposes, and does not
represent recommended usage of the FOOOF module.


Algorithmic Description
-----------------------

Briefly, the algorithm proceeds as such:

- An initial fit of the aperiodic signal is taken across the power spectrum
- This aperiodic fit is subtracted from the power spectrum, creating a flattened spectrum
- Peaks are iteratively found in this flattened spectrum
- A full peak fit is created of all peak candidates found
- The peak fit is subtracted from the original power spectrum,
  creating a peak-removed power spectrum
- A final fit of the aperiodic signal is taken of the peak-removed power spectrum



.. code-block:: python


    # General imports
    import numpy as np
    import matplotlib.pyplot as plt

    # Import the FOOOF object
    from fooof import FOOOF

    # Import a function to generate synthetic power spectra
    from fooof.synth.gen import gen_aperiodic

    # Import some internal functions from FOOOF
    #  Note that these are used here for demonstration: - you do not need to import them to run FOOOF
    from fooof.core.funcs import gaussian_function
    from fooof.plts.spectra import plot_spectrum
    from fooof.plts.fm import plot_peak_iter








.. code-block:: python


    # Set whether to plot in log-log space (used across the whole notebook)
    plt_log = False








.. code-block:: python


    # Load example data
    freqs = np.load('./dat/freqs_2.npy')
    spectrum = np.load('./dat/spectrum_2.npy')








.. code-block:: python


    # Initialize a FOOOF object, with some settings
    fm = FOOOF(peak_width_limits=[1, 8], max_n_peaks=6 , min_peak_amplitude=0.15)







Note that data can be added to FOOOF independent of fitting the model.
You can then plot input data.




.. code-block:: python


    # Add data to FOOOF object
    fm.add_data(freqs, spectrum, [3, 40])








.. code-block:: python


    # Plot the power spectrum that we just created
    fm.plot(plt_log)




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_001.png
    :class: sphx-glr-single-img




The FOOOF object stores most of the intermediate steps internally.

For this notebook, we will first fit the full model, as normal, but then step through,
and visualize each step the algorithm takes to come to that final fit.




.. code-block:: python


    # Fit the FOOOF model
    fm.fit(freqs, spectrum, [3, 40])








.. code-block:: python


    # Do an initial aperiodic signal fit - a robust fit, that excludes outliers
    #  This recreates an initial fit that isn't ultimately stored in the FOOOF object)
    init_ap_fit = gen_aperiodic(fm.freqs, fm._robust_ap_fit(fm.freqs, fm.power_spectrum))

    # Plot the initial aperiodic fit
    _, ax = plt.subplots(figsize=(12, 10))
    plot_spectrum(fm.freqs, fm.power_spectrum, plt_log, label='Original Power Spectrum', ax=ax)
    plot_spectrum(fm.freqs, init_ap_fit, plt_log, label='Initial Aperiodic Fit', ax=ax)




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_002.png
    :class: sphx-glr-single-img




The initial fit, as above, is used to create a flattened spectrum,
from which peaks can be extracted.




.. code-block:: python


    # Flatten the power spectrum, by subtracting out the initial aperiodic fit
    plot_spectrum(fm.freqs, fm._spectrum_flat, plt_log, label='Flattened Spectrum')




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_003.png
    :class: sphx-glr-single-img




With the flattened spectrum, FOOOF then initiates an iterative procedure to find peaks.

For each iteration:

- The maximum point of the flattened spectrum is found.

  - If this point fails to pass the relative or absolute amplitude threshold,
    the procedure halts.
- A Gaussian is fit around this maximum point
- This 'guess' Gaussian is then subtracted from the flatted spectrum
- The procedure continues to a new iteration with the new version of the flattend spectrum,
  unless `max_n_peaks` has been reached




.. code-block:: python


    # Plot the iterative approach to finding peaks from the flattened spectrum
    plot_peak_iter(fm)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_004.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_005.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_006.png
            :class: sphx-glr-multi-img




Once the iterative procedure has halted, the extracted 'guess' peaks,
are then re-fit, all together, to the flattened spectrum, creating a peak fit.




.. code-block:: python


    # Fit gaussians to all candidate peaks together, and create peak fit
    plot_spectrum(fm.freqs, fm._peak_fit, plt_log)




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_007.png
    :class: sphx-glr-single-img




This is now the peak component of the fit completed. This fit is then used to go
back and try and get a better aperiodic fit.

To do so, the peak fit is removed from the original power spectrum,
leaving an 'aperiodic-only' spectrum for re-fitting.




.. code-block:: python


    # Create peak removed power spectrum (by removing peak fit from original spectrum)
    plot_spectrum(fm.freqs, fm._spectrum_peak_rm, plt_log, label='Peak Removed Spectrum')




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_008.png
    :class: sphx-glr-single-img





.. code-block:: python


    # Fit the final aperiodic fit on the peak removed power spectrum
    _, ax = plt.subplots(figsize=(12, 10))
    plot_spectrum(fm.freqs, fm._spectrum_peak_rm, plt_log, label='Peak Removed Spectrum', ax=ax)
    plot_spectrum(fm.freqs, fm._ap_fit, plt_log, label='Final Aperiodic Fit', ax=ax)




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_009.png
    :class: sphx-glr-single-img




The aperiodic fit component of the model is now also complete.
The two components can now be combined.




.. code-block:: python


    # Recreate the full FOOOF model, by combining the peak and aperiodic fits
    plot_spectrum(fm.freqs, fm.fooofed_spectrum_, plt_log, label='Full Model')




.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_010.png
    :class: sphx-glr-single-img





.. code-block:: python


    # The last stage is to calculate the fit error, R^2, and update gaussian parameters -> peak parameters
    #  These results are part of what are stored, and printed, as the model results
    fm.print_results()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ==================================================================================================
                                                                                                  
                                       FOOOF - POWER SPECTRUM MODEL                                   
                                                                                                  
                            The model was run on the frequency range 3 - 40 Hz                        
                                     Frequency Resolution is 0.49 Hz                                  
                                                                                                  
                                Aperiodic Parameters (offset, exponent):                              
                                             -21.3713, 1.1239                                         
                                                                                                  
                                           2 peaks were found:                                        
                                    CF:  10.00, Amp:  0.685, BW:  3.18                                
                                    CF:  16.32, Amp:  0.138, BW:  7.03                                
                                                                                                  
                                         Goodness of fit metrics:                                     
                                        R^2 of model fit is 0.9909                                    
                                    Root mean squared error is 0.0332                                 
                                                                                                  
    ==================================================================================================



.. code-block:: python


    # Plot the full model fit of the power spectrum
    #  The final fit (red), and aperiodic fit (blue), are the same as we plotted above
    fm.plot(plt_log)



.. image:: /auto_tutorials/images/sphx_glr_plot_03-FOOOFAlgorithm_011.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  0.184 seconds)


.. _sphx_glr_download_auto_tutorials_plot_03-FOOOFAlgorithm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_03-FOOOFAlgorithm.py <plot_03-FOOOFAlgorithm.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_03-FOOOFAlgorithm.ipynb <plot_03-FOOOFAlgorithm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
