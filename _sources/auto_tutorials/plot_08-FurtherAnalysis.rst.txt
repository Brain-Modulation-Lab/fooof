.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_08-FurtherAnalysis.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_08-FurtherAnalysis.py:


08: Further Analysis
====================

Analyze results from fitting FOOOF models.

Exploring FOOOF Analyses
------------------------

So far we have explored how to use FOOOF a a method to extract features
of interest from your data - in particular measuring aperiodic and periodic activity.

These features can then be examined within or between groups of interest,
and/or fed into further analysis to examine if, for example, these features
predict other behavioural or physiological features of interest.
Largely, it is up to you what to do after running FOOOF, as it depends on your
questions of interest.

Here, we briefly introduce some analysis utilities that are packaged with FOOOF,
and explore some simple analyses that can be done with FOOOF outputs.

To start, we will load and fit some example data, as well as simulate a group of
power spectra to fit with a FOOOFGroup object.



.. code-block:: default


    # General imports
    import numpy as np

    # Import the FOOOF and FOOOFGroup objects
    from fooof import FOOOF, FOOOFGroup

    # Import the Bands object, which is used to define oscillation bands
    from fooof.bands import Bands

    # Import FOOOF simulation code and utilities
    from fooof.sim.params import param_sampler
    from fooof.sim.gen import gen_group_power_spectra

    # Import some of the analysis functions that come with FOOOF
    from fooof.analysis import get_band_peak, get_band_peak_fm, get_band_peak_fg








Load and Fit Example Data
~~~~~~~~~~~~~~~~~~~~~~~~~



.. code-block:: default


    # Load some example data
    freqs = np.load('data/freqs.npy')
    spectrum = np.load('data/spectrum.npy')









.. code-block:: default


    # Fit a FOOOF model
    fm = FOOOF(peak_width_limits=[2, 8])
    fm.fit(freqs, spectrum, [3, 30])








Simulate and Fit Group Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~



.. code-block:: default


    # Generate some simulated power spectra and fit a FOOOFGroup to use
    freqs, spectra = gen_group_power_spectra(n_spectra=10,
                                             freq_range=[3, 40],
                                             aperiodic_params=param_sampler([[20, 2], [35, 1.5]]),
                                             periodic_params=param_sampler([[], [10, 0.5, 2]]))









.. code-block:: default


    # Fit FOOOF models across the group of simulated power spectra
    fg = FOOOFGroup(peak_width_limits=[1, 8], min_peak_height=0.05, max_n_peaks=6, verbose=False)
    fg.fit(freqs, spectra)








FOOOF Analysis Utilities
------------------------

FOOOF is packaged with some analysis functions. Note that these utilities are
generally relatively simple utilities that assist in accessing and investigating
the model fit parameters. Analyzing FOOOF results is typically idiosyncratic to the
goals of the project, and so we consider that this will typically require custom code,
and seek here to offer the most general utilities, and not support all possible applications.
Here we demonstrate some of these utility functions covering very general use cases.


Analyzing Periodic Components
-----------------------------

We will start by analyzing the periodic components.
In particular, these utilities mostly serve to help organize and extract periodic
components, for example extracing peak that fall with oscillation band defintions.

This also includes using the `Bands` object, that is provided to store band defintions.



.. code-block:: default


    # Define frequency bands of interest
    bands = Bands({'theta' : [4, 8],
                   'alpha' : [8, 12],
                   'beta' : [15, 30]})








get_band_peak
~~~~~~~~~~~~~~~~

The :func:`get_band_peak` function is used to select peaks within specific frequency ranges.

You can optionally specify whether to return all oscillations within that band,
or a singular result, which returns the highest power peak (if there are multiple),
and also apply a minimum threshold to extract peaks.


get_band_peak_fm
~~~~~~~~~~~~~~~~

You can use the :func:`get_band_peak` function directly if you have already
extracted the peak parameters from a FOOOF object. You can also use the
:func:`get_band_peak_fm` function and pass in a FOOOF object.



.. code-block:: default


    # Extract any alpha band oscillations from the FOOOF model
    print(get_band_peak_fm(fm, bands.alpha))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [9.74352735 1.0568355  2.08041386]




get_band_peak_fg
~~~~~~~~~~~~~~~~

Similary, the :func:`get_band_peak_group` function can be used to select peaks within
specific frequency ranges, from FOOOFGroup object.



.. code-block:: default


    # Get all alpha oscillations from a FOOOFGroup object
    alphas = get_band_peak_fg(fg, bands.alpha)









.. code-block:: default


    # Check out some of the alpha data
    print(alphas[0:5, :])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[10.03993749  0.48575651  3.79992456]
     [        nan         nan         nan]
     [        nan         nan         nan]
     [10.02226131  0.48688056  3.81660102]
     [10.03005794  0.4891892   3.7970663 ]]




Note that when selecting peaks from a group of model fits, we retain
information regarding which oscillation came from with model fit.

To do so, it's output is organized such that each row corresponds to a specific
model fit, such that the matrix returned is size [n_fits, 3].

For this to work, at most 1 peak is extracted for each model fit within the specified band.

If more than 1 peak are found within the band, the peak with the highest power is extracted.
If no peaks are found, that row is filled with 'nan'.



.. code-block:: default


    # Check descriptive statistics of oscillation data
    print('Alpha CF : {:1.2f}'.format(np.nanmean(alphas[:, 0])))
    print('Alpha PW : {:1.2f}'.format(np.nanmean(alphas[:, 1])))
    print('Alpha BW : {:1.2f}'.format(np.nanmean(alphas[:, 2])))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Alpha CF : 10.03
    Alpha PW : 0.49
    Alpha BW : 3.80




A Note on Frequency Ranges
--------------------------

A benefit of using FOOOF to model power spectra is that you do not have to define
a priori frequency ranges from which to extract oscillations.

Nevertheless, it may still be useful to group extracted peaks into 'bands' of interest,
which is why the aforementioned functions are offered.

Since this frequency-range selection can be done after model fitting, we do recommend
checking the model results, for example by checking a histogram of the center frequencies
extracted across a group, in order to ensure the frequency ranges you choose reflect
the characteristics of the data under study.


Analyzing the Aperiodic Component
---------------------------------

Typically for analyzing the aperiodic component of the data, aperiodic parameters
just need to be extracted from FOOOF objects and fit into analyses of interest.



.. code-block:: default


    # Plot from the FOOOFGroup, to visualize the parameters
    fg.plot()




.. image:: /auto_tutorials/images/sphx_glr_plot_08-FurtherAnalysis_001.png
    :class: sphx-glr-single-img






.. code-block:: default


    # Extract aperiodic exponent data from group results
    exps = fg.get_params('aperiodic_params', 'exponent')

    # Check out the aperiodic exponent results
    print(exps)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [2.01868987 1.5039424  1.99932653 2.01985616 2.01823925 1.51782632
     1.50282156 1.5016588  2.01877098 1.52056289]




Example FOOOF Analyses
----------------------

Once you have extracted the parameters you can analyze them by, for example:

- Characterizing oscillations & aperiodic properties,
  and analyzing spatial topographies, across demographics, modalities, and tasks
- Comparing oscillations within and between subjects across different tasks of interest
- Predicting disease state based on FOOOF derived oscillation & aperiodic features
- Using FOOOF on a trial by trial manner to decode task properties, and behavioral states

So far we have only introduced the basic utilities to help with
selecting and examing FOOOF parameters.

To further explore some of these specific analyses, and explore other
utilities that may be useful, check out the
`examples <https://fooof-tools.github.io/fooof/auto_examples/index.html>`_
page.


Conclusion
----------

This is the end of the main FOOOF tutorial materials!

If you are having any troubles, please submit an issue on Github
`here <https://github.com/fooof-tools/fooof>`_,
and/or get in contact with us at voytekresearch@gmail.com.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.240 seconds)


.. _sphx_glr_download_auto_tutorials_plot_08-FurtherAnalysis.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_08-FurtherAnalysis.py <plot_08-FurtherAnalysis.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_08-FurtherAnalysis.ipynb <plot_08-FurtherAnalysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
